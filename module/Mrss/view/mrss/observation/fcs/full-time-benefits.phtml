<?php
/**
 * This is a special data-entry template that displays this form as a table
 */

$tableConfig = $dataEntryLayout;
$tableConfig2 = $this->currentStudy(false)->getConfig()->data_entry_layout->toArray();
$tableConfig2 = $tableConfig2['4b'];
$showValidationColumns = true;

$this->layout()->setVariable('noWrapper', true);

$colClassConfig = array(
    'professor exp 9-month', 
    'professor cov 9-month', 
    'associate exp 9-month', 
    'associate cov 9-month', 
    'assistant exp 9-month', 
    'assistant cov 9-month', 
    'instructor exp 9-month', 
    'instructor cov 9-month', 
    'lecturer exp 9-month', 
    'lecturer cov 9-month', 
    'no-rank exp 9-month',
    'no-rank cov 9-month',
);

$colClassConfig2 = array(
    'professor exp 12-month', 
    'professor cov 12-month', 
    'associate exp 12-month', 
    'associate cov 12-month', 
    'assistant exp 12-month', 
    'assistant cov 12-month', 
    'instructor exp 12-month', 
    'instructor cov 12-month', 
    'lecturer exp 12-month', 
    'lecturer cov 12-month', 
    'no-rank exp 12-month',
    'no-rank cov 12-month',
);

$colClassConfig3 = array(
    'no-diff exp 9-month',
    'no-diff cov 9-month'
);

$colClassConfig4 = array(
    'no-diff exp 12-month',
    'no-diff cov 12-month'
);

$benefitRowClassesWithLabels = array(
    'Retirement' => 'retirement',
    'Medical' => 'medical',
    'Dental' => 'dental',
    '(Optional) Combined Medical w/ Dental' => 'combined',
    'Disability' => 'disability',
    'Tuition' => 'tuition',
    'FICA' => 'fica',
    'Unemployment' => 'unemployment',
    'Group Life' => 'group-life',
    "Worker's Comp." => 'workers-comp',
    'Other' => 'other'
);
$benefitRowClasses = array_values($benefitRowClassesWithLabels);

$colSpan = 15;
?>

<?= $this->headLink()->appendStylesheet('/css/data-entry-grid.css') ?>
<?= $this->headLink()->appendStylesheet('/css/data-entry.css') ?>

<?php
$this->headScript()->appendFile(
    '/js/data-entry.js?v=4',
    'text/javascript'
); ?>


<div id="content">
    <div class="container-wide">


<?= $this->partial(
    'mrss/observation/data-entry-nav.partial.phtml',
    array(
        'benchmarkGroup' => $benchmarkGroup,
        'benchmarkGroups' => $benchmarkGroups
    )
)
?>

<script>
    // Conversion factor (set in form 1)
    var conversionFactor = <?= getConversionFactor($observation) ?>;


    $(function() {
        updateSalaryTotals();
        updateBenefitPercents();
        updateBenefitAverages();
        updateBenefitsAverageAllRanks();
        $('form input').change(function() {
            updateSalaryTotals();
            updateBenefitPercents();
            updateBenefitAverages();
            updateBenefitsAverageAllRanks();
        })

        updateAggregateToggle();
        $('select#institution_aggregate_benefits').change(function() {
            updateAggregateToggle();
        })
    })

    function updateAggregateToggle()
    {
        // Grab the tables
        var rankedTable = $('#benefitsRanked');
        var aggregateTable = $('#benefitsAggregate');

        // First, hide them both
        rankedTable.hide();
        aggregateTable.hide();

        // Now check the value of the dropdown
        var benefitSetting = $('select#institution_aggregate_benefits').val();

        if (benefitSetting == 'Yes') {
            aggregateTable.show();
        } else if (benefitSetting == 'No') {
            rankedTable.show();
        }
    }

    function updateBenefitPercents()
    {
        $('.benefitsAsPercent').each(function() {
            var cell = $(this);
            var id = cell.attr('id');
            var idParts = id.split(':');
            var salaries = parseFloat(idParts.pop());

            // Trash the first part of the id
            idParts.shift();

            var benefitClass = idParts.join('.');
            if (benefitClass) benefitClass = '.' + benefitClass;
            benefitClass = benefitClass + '.exp input';
            var benefitAmount = 0;
            cell.parents('table').find(benefitClass).each(function() {
                var amount = Number($(this).val());

                if (conversionApplies(cell, $(this))) {
                    amount = amount * getConversionFactor();
                }

                //console.log(benefitClass); console.log(amount)
                benefitAmount = benefitAmount + amount;

            });

            var percent;
            if (salaries && benefitAmount) {
                percent = Math.round(benefitAmount / salaries * 100 * 100) / 100;
                percent = percent + '%';

                //console.log(benefitAmount.toString() + ' / ' + salaries.toString() + ' = ' + percent);
            } else {
                percent = '';
            }

            if (false && salaries == 56135751) {
                console.log(benefitClass)
                console.log(benefitAmount)
            }
            cell.html(percent);

        })
    }

    function conversionApplies(targetCell, sourceCell)
    {
        var applies = false;

        var sourceWrap = sourceCell.parent().parent().parent().parent();
        if (targetCell.hasClass('percentConversion')) {
            if (sourceWrap.hasClass('12-month')) {
                if (sourceWrap.hasClass('retirement') || sourceWrap.hasClass('fica') ||
                    sourceWrap.hasClass('group-life') || sourceWrap.hasClass('workers-comp')) {

                    applies = true;
                }
            }
        }

        return applies;
    }

    function getTotalMaxFaculty(countClass, cell)
    {
        var total = 0;

        var contracts = ['9-month', '12-month'];
        for (var i in contracts) {
            var contract = contracts[i];
            var newClass = '.' + contract + countClass;
            var contractMax = getMaxFaculty(newClass, cell);
            total = total + contractMax;
        }

        return total;
    }

    function getTotalSumFaculty(countClass, cell)
    {
        var total = 0;

        var contracts = ['9-month', '12-month'];
        for (var i in contracts) {
            var contract = contracts[i];
            var newClass = '.' + contract + countClass;
            var contractSum= getSumFaculty(newClass, cell);
            total = total + contractSum;
        }

        return total;
    }

    function getMaxFaculty(countClass, cell) {
        // If no contract is specified...
        if (countClass.indexOf('-month') == -1) {
            // One rank, all contracts
            if (hasRank(countClass)) {
                return getTotalMaxFaculty(countClass, cell);
            } else {
                // All ranks, all contracts
                var total = getTotalSumFaculty(countClass, cell);

                return total;
            }
        }

        // The all ranks column on the far right
        if (benefitAverageUseSum(cell.attr('id'))) {
            benefitCovered = getSumFaculty(countClass, cell);
        }

        // Use max
        var benefitCovered = 0;
        cell.parents('table').find(countClass).each(function() {
            // Maximum
            var val = Number($(this).val());
            if (val > benefitCovered) {
                benefitCovered = val;
            }
        });

        return benefitCovered;
    }

    function getSumFaculty(countClass, cell)
    {
        var benefitCovered = 0;

        cell.parents('table').find(countClass).each(function() {
            benefitCovered = benefitCovered + Number($(this).val());
        });

        return benefitCovered;
    }

    function hasRank(countClass)
    {
        var hasRank = false;
        var ranks = getRanks();
        for (var i in ranks) {
            var rank = ranks[i];
            if (countClass.indexOf(rank) > -1) {
                hasRank = true;
            }
        }

        return hasRank;
    }

    function getRanks() {
        return [
            'professor',
            'associate',
            'assistant',
            'instructor',
            'lecturer',
            'no-rank'
        ];
    }


    function updateBenefitAverages()
    {
        $('.benefitsAverage').each(function() {
            var cell = $(this);
            var id = cell.attr('id');
            var idParts = id.split(':');

            // Trash the first part of the id
            idParts.shift();

            var benefitClass = idParts.join('.');
            var countClass = benefitClass;
            benefitClass = '.' + benefitClass + '.exp input';
            countClass = '.' + countClass + '.cov input';

            var benefitCost = 0;
            cell.parents('table').find(benefitClass).each(function() {
                benefitCost = benefitCost + Number($(this).val());
            });

            var benefitCovered = getMaxFaculty(countClass, cell);

            /*if (true && id == 'val2:9-month') {
                console.log(benefitClass);
                console.log(benefitCost);
                console.log(countClass);
                console.log(benefitCovered);
            }*/


            var result;
            if (benefitCost && benefitCovered) {
                var intResult = Math.round(benefitCost / benefitCovered);
                result = '$' + intResult;

                if (intResult == 17971) {
                    console.log(countClass)
                    console.log(cell.attr('id'))
                    console.log(result);
                    console.log(benefitCost + ' / ' + benefitCovered)
                }
            } else {
                //result = 'CHECK';
                result = '';
            }

            cell.html(result);
        })
    }

    function updateBenefitsAverageAllRanks()
    {
        $('.benefitsAverageAllRanks').each(function() {
            var cell = $(this);
            var id = cell.attr('id');
            var idParts = id.split(':');

            // Trash the first part of the id
            idParts.shift();

            var benefit = idParts.join('.');
            var benefitClass = '.benefitsAverageTotal.exp';
            var countClass = '.benefitsAverageTotal.cov';

            if (benefit) {
                benefitClass = '.' + benefit + benefitClass;
                countClass = '.' + benefit + countClass;
            }


            var benefitCost = 0;
            cell.parents('table').find(benefitClass).each(function() {
                benefitCost = benefitCost + Number($(this).html());
            });

            var benefitCovered = 0;
            cell.parents('table').find(countClass).each(function() {
                benefitCovered = benefitCovered + Number($(this).html());
            });

            var result = '';
            if (benefitCovered) {
                result = benefitCost / benefitCovered;
                result = Math.round(result);
                result = '$' + result;
            }

            cell.html(result);
        })
    }

    function benefitAverageUseSum(id)
    {
        var idParts = id.split(':');
        var useSum = false;
        var benefits = [
            'retirement',
            'medical',
            'dental',
            'combined',
            'disability',
            'tuition',
            'fica',
            'unemployment',
            'group-life',
            'workers-comp',
            'other'
        ];

        if (idParts.length == 3) {
            if (benefits.indexOf(idParts[1]) > -1) {
                useSum = true;
            }
        }

        return useSum;
    }
</script>


<h1>
    <?= $benchmarkGroup->getName() ?>
</h1>

<?php if ($description = $benchmarkGroup->getDescription()): ?>
    <div class="well">
        <?= $description ?>
    </div>
<?php endif ?>


<?php $form->prepare() ?>


<?= $this->form()->openTag($form) ?>


<p>
<h3>Aggregate Benefits</h3>
        Does Institution Aggregate Benefits?
<?= $this->formElement($form->get('institution_aggregate_benefits')) ?>
</p>

<table class="table table-condensed table-bordered data-entry-grid data-entry-compact" id="benefitsRanked">
    <thead>
    <tr class="splitHeading">
        <td></td>
        <th colspan="2" class="data-entry-red">Professor</th>
        <th colspan="2" class="data-entry-blue">Associate</th>
        <th colspan="2" class="data-entry-red">Assistant</th>
        <th colspan="2" class="data-entry-blue">Instructor</th>
        <th colspan="2" class="data-entry-red">Lecturer</th>
        <th colspan="2" class="data-entry-blue">No Rank</th>
        <th colspan="2" class="data-entry-red">TOTAL</th>
        <?php if ($showValidationColumns): ?>
            <td class="no-border"></td>
            <th colspan="8">Benefits as a Percent of Salary</th>

            <td class="no-border"></td>
            <th colspan="8">Benefits Average</th>

        <?php endif ?>
    </tr>
    <tr class="smallHeading splitHeading data-entry-heading">
        <th></th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>

        <?php if ($showValidationColumns): ?>
            <td class="no-border"></td>
            <th class="data-entry-blue"></th>
            <th class="data-entry-red">Professor</th>
            <th class="data-entry-blue">Associate</th>
            <th class="data-entry-red">Assistant</th>
            <th class="data-entry-blue">Instructor</th>
            <th class="data-entry-red">Lecturer</th>
            <th class="data-entry-blue">No Rank</th>
            <th class="data-entry-red">All Ranks</th>

            <td class="no-border"></td>
            <th class="data-entry-blue"></th>
            <th class="data-entry-red">Professor</th>
            <th class="data-entry-blue">Associate</th>
            <th class="data-entry-red">Assistant</th>
            <th class="data-entry-blue">Instructor</th>
            <th class="data-entry-red">Lecturer</th>
            <th class="data-entry-blue">No Rank</th>
            <th class="data-entry-red">All Ranks</th>

        <?php endif ?>


    </tr>

    </thead>

    <tbody>
    <?php foreach ($tableConfig as $section): ?>
        <? if (!empty($section['title'])): ?>
            <tr>
                <td class="grid-category" colspan="4"><?= $section['title'] ?></td>
            </tr>
        <?php endif ?>

        <?php $sectionRow = 0; ?>
        <?php foreach ($section['rows'] as $label => $row): ?>
            <tr>
            <?php if (!is_array($row)): ?>
                <?php if ($row == '[total_row_9]' || $row == '[total_row_12]'): ?>
                    <?php $monthNumber = preg_replace('/[^0-9]/', '', $row) ?>
                    <td class="grid-category">TOTAL</td>
                    <?php foreach ($colClassConfig as $class): ?>
                        <?php $classes = explode(' ', $class); ?>
                        <?php $newId = implode('_', $classes); ?>
                        <?php if (in_array('exp', $classes)): ?>
                            <td class="column-total benefitsAverageTotal exp <?= $monthNumber ?>-month" id="<?= $newId ?>">0</td>
                        <?php else: ?>
                            <td class="column-input-max benefitsAverageTotal cov <?= $monthNumber ?>-month" id="<?= $newId ?>">0</td>
                        <?php endif ?>
                    <?php endforeach ?>

                    <td class="column-total" id="exp_<?= $monthNumber ?>-month">0</td>
                    <td class="column-max" id="cov_<?= $monthNumber ?>-month">0</td>

                    <?php if ($showValidationColumns) showValidationColumnsTotal($monthNumber, $observation) ?>

                    <?php $colClassConfig = $colClassConfig2; ?>
                <?php else: ?>
                    <td colspan="<?= $colSpan ?>">
                        <h2 class="data-entry-subheading">
                            <?= $row ?>
                        </h2>
                    </td>
                <?php endif ?>
            <?php else: ?>
                <td class="grid-category <?= (empty($section['rowClass'])) ? '' : $section['rowClass'] ?>">
                    <?= $label ?>
                </td>

                <?php foreach ($row as $i => $field): ?>
                    <?php if (!empty($field)):  ?>
                        <td class="grid-value <?= $colClassConfig[$i] ?> <?= $benefitRowClasses[$sectionRow] ?>"
                            id="<?= $colClassConfig[$i] ?>-<?= $field ?>">
                            <?= $this->simpleFormElement($form->get($field)) ?>
                        </td>
                    <?php else: ?>
                        <td class="emptyCell"></td>
                    <?php endif ?>
                <?php endforeach ?>

                <?php
                $classParts = explode(' ', $colClassConfig[$i - 1]);
                array_shift($classParts);
                array_push($classParts, $benefitRowClasses[$sectionRow]);
                $totalId = implode('_', $classParts);
                ?>
                <td class="column-total" id="<?= $totalId ?>">0</td>

                <?php
                $classParts = explode(' ', $colClassConfig[$i]);
                array_shift($classParts);
                $maxClass = implode(' ', $classParts);
                array_push($classParts, $benefitRowClasses[$sectionRow]);
                $totalId = implode('_', $classParts);
                ?>
                <td class="column-total max-target <?= $maxClass ?>" id="<?= $totalId ?>">0</td>
                <?php $contract = $classParts[1]; ?>
                <?php if ($showValidationColumns) displayValidationColumns($contract, $sectionRow, $observation); ?>

                </tr>

                <tr class="help-text">
                <td class="grid-category"></td>
                <td colspan="<?= count($row) ?>">

                    <?php /* foreach ($row as $i => $field): ?>
                        <?php if (empty($field)) continue ?>
                        <div class="<?= $colClassConfig[$i] ?>-help grid-help">
                            <h5><?= $form->get($field)->getLabel() ?></h5>
                            <?= $form->get($field)->getOption('help-block') ?>
                        </div>
                    <?php endforeach */ ?>

                </td>
                <?php $sectionRow++ ?>
            <?php endif ?>
            </tr>
        <?php endforeach ?>
    <?php endforeach ?>

    <?php foreach ($benefitRowClassesWithLabels as $label => $rowClass): ?>
        <tr>
            <td class="grid-category"><?= $label ?></td>
            <?php foreach ($colClassConfig as $class): ?>
                <?php $class = str_replace(' 12-month', '', $class) . ' ' . $rowClass; ?>
                <?php $classes = explode(' ', $class) ?>
                <?php if (in_array('exp', $classes)): ?>
                    <td id="<?= implode('_', $classes) ?>" class="column-total apply-conversion">0</td>
                <?php else: ?>
                    <td class="column-total max-target <?= implode(' ', $classes) ?>" id="<?= implode('_', $classes) ?>">0</td>
                <?php endif ?>
            <?php endforeach ?>

            <td class="column-total apply-conversion" id="exp_<?= $rowClass ?>">0</td>
            <td class="column-total max-target cov" id="cov_<?= $rowClass ?>">0</td>

            <?php if ($showValidationColumns) displayValidationTotals($rowClass, $label, $observation); ?>

        </tr>
    <?php endforeach ?>

    <tr>
        <td class="grid-category">TOTAL</td>
        <?php foreach ($colClassConfig as $class): ?>
            <?php $class = str_replace(' 12-month', '', $class); ?>
            <?php $classes = explode(' ', $class); ?>
            <?php if (in_array('exp', $classes)): ?>
                <td id="<?= implode('_', $classes) ?>" class="column-total apply-conversion">0</td>
            <?php else: ?>
                <td id="<?= implode('_', $classes) ?>" class="column-max">0</td>
            <?php endif ?>
        <?php endforeach ?>

        <td class="column-total apply-conversion" id="exp"></td>
        <td class="column-max" id="cov"></td>



        <?php if ($showValidationColumns): ?>

            <?php $totalSalaries = 0; ?>
            <td class="no-border"></td>
            <td class="grid-category">TOTAL</td>
            <?php foreach (getRanks() as $rank => $rankLabel): ?>
                <?php
                $salaries = getSalariesCombined($rank, $observation);
                $totalSalaries += $salaries;
                $rankShort = shortenRank($rank);
                $id = "val3:$rankShort:$salaries";
                ?>

                <td class="benefitsAsPercent percentConversion" id="<?= $id ?>"></td>

            <?php endforeach ?>

            <td class="benefitsAsPercent percentConversion" id="val3:<?= $totalSalaries ?>"></td>

            <?php // Average benefits ?>
            <td class="no-border"></td>
            <td class="grid-category">TOTAL</td>
            <?php foreach (getRanks() as $rank => $rankLabel): ?>
                <?php
                $rankShort = shortenRank($rank);
                ?>

                <td class="benefitsAverage" id="val2:<?= $rankShort ?>">

                </td>
            <?php endforeach ?>

            <td class="benefitsAverageAllRanks" id="val5"></td>




        <?php endif ?>

    </tr>


    </tbody>
</table>






<?php // Undifferentiated by rank: ?>

<?php $colSpan = 3; ?>

<table class="table table-condensed table-bordered data-entry-grid data-entry-compact" id="benefitsAggregate">
    <thead>
    <tr class="splitHeading">
        <td></td>
        <th colspan="2" class="data-entry-red">UNDIFFERENTIATED RANK</th>
    </tr>
    <tr class="smallHeading splitHeading data-entry-heading">
        <th></th>
        <th>Total Expenditure</th>
        <th>Number Covered</th>
    </tr>

    </thead>

    <tbody>
    <?php foreach ($tableConfig2 as $section): ?>
        <? if (!empty($section['title'])): ?>
            <tr>
                <td class="grid-category" colspan="3"><?= $section['title'] ?></td>
            </tr>
        <?php endif ?>

        <?php $sectionRow = 0; ?>
        <?php foreach ($section['rows'] as $label => $row): ?>
            <tr>
            <?php if (!is_array($row)): ?>
                <?php if ($row == '[total_row_9]' || $row == '[total_row_12]'): ?>
                    <?php $monthNumber = preg_replace('/[^0-9]/', '', $row) ?>
                    <td class="grid-category">TOTAL</td>
                    <?php foreach ($colClassConfig3 as $class): ?>
                        <?php $classes = explode(' ', $class); ?>
                        <?php $newId = implode('_', $classes); ?>
                        <?php if (in_array('exp', $classes)): ?>
                            <td class="column-total" id="<?= $newId ?>">0</td>
                        <?php else: ?>
                            <td class="column-input-max" id="<?= $newId ?>">0</td>
                        <?php endif ?>
                    <?php endforeach ?>

                    <?php $colClassConfig3 = $colClassConfig4; ?>
                <?php else: ?>
                    <td colspan="<?= $colSpan ?>">
                        <h2 class="data-entry-subheading">
                            <?= $row ?>
                        </h2>
                    </td>
                <?php endif ?>
            <?php else: ?>
                <td class="grid-category <?= (empty($section['rowClass'])) ? '' : $section['rowClass'] ?>">
                    <?= $label ?>
                </td>

                <?php foreach ($row as $i => $field): ?>
                    <?php if (!empty($field)):  ?>
                        <td class="grid-value <?= $colClassConfig3[$i] ?> <?= $benefitRowClasses[$sectionRow] ?>"
                            id="<?= $colClassConfig3[$i] ?>-<?= $field ?>">
                            <?= $this->simpleFormElement($form->get($field)) ?>
                        </td>
                    <?php else: ?>
                        <td class="emptyCell"></td>
                    <?php endif ?>
                <?php endforeach ?>
                </tr>

                <tr class="help-text">
                <td class="grid-category"></td>
                <td colspan="<?= count($row) ?>">

                    <?php /* foreach ($row as $i => $field): ?>
                        <?php if (empty($field)) continue ?>
                        <div class="<?= $colClassConfig[$i] ?>-help grid-help">
                            <h5><?= $form->get($field)->getLabel() ?></h5>
                            <?= $form->get($field)->getOption('help-block') ?>
                        </div>
                    <?php endforeach */ ?>

                </td>
                <?php $sectionRow++ ?>
            <?php endif ?>
            </tr>
        <?php endforeach ?>
    <?php endforeach ?>

    <?php foreach ($benefitRowClassesWithLabels as $label => $rowClass): ?>
        <tr>
            <td class="grid-category"><?= $label ?></td>
            <?php foreach ($colClassConfig3 as $class): ?>
                <?php $class = str_replace(' 12-month', '', $class) . ' ' . $rowClass; ?>
                <?php $classes = explode(' ', $class) ?>
                <?php if (in_array('exp', $classes)): ?>
                    <td id="<?= implode('_', $classes) ?>" class="column-total apply-conversion">0</td>
                <?php else: ?>
                    <td class="column-total max-target <?= implode(' ', $classes) ?>" id="<?= implode('_', $classes) ?>">0</td>
                <?php endif ?>
            <?php endforeach ?>

        </tr>
    <?php endforeach ?>


    <tr>
        <td class="grid-category">TOTAL</td>
        <?php foreach ($colClassConfig3 as $class): ?>
            <?php $class = str_replace(' 12-month', '', $class); ?>
            <?php $classes = explode(' ', $class); ?>
            <?php if (in_array('exp', $classes)): ?>
                <td id="<?= implode('_', $classes) ?>" class="column-total apply-conversion">0</td>
            <?php else: ?>
                <td id="<?= implode('_', $classes) ?>" class="column-max">0</td>
            <?php endif ?>
        <?php endforeach ?>
    </tr>


    </tbody>
</table>







<?php if ($this->currentStudy()->getDataEntryOpen()): ?>
    <fieldset id="fieldset-buttons" class="well well-small">
        <div class="control-group" id="control-group-buttons[submit]">
            <div class="controls" id="controls-buttons[submit]">
                <?= $this->formElement($form->get('buttons')->get('submit')) ?>
            </div>
        </div>
        <div class="control-group" id="control-group-buttons[save-edit]">
            <div class="controls" id="controls-buttons[save-edit]">
                <?= $this->formElement($form->get('buttons')->get('save-edit')) ?>
            </div>
        </div>

    </fieldset>
<?php endif ?>

<?= $this->form()->closeTag() ?>
</div>
</div>


<?php

function displayValidationColumns($contract, $sectionRow, $observation)
{
    list($benefit, $benefitLabel) = getBenefit($sectionRow);
    $benefitShort = shortenBenefit($benefit);

    // First, the benefits as percent table

    ?>

    <td class="no-border"></td>
    <td class="grid-category"><?= $benefitLabel ?></td>

    <?php foreach (getRanks() as $rank => $rankLabel): ?>
        <?php
            $salaries = getSalaries($rank, $contract, $observation);
            $rankShort = shortenRank($rank);
        ?>

        <td class="benefitsAsPercent" id="val1:<?= $rankShort ?>:<?= $benefitShort ?>:<?= $contract ?>:<?= $salaries ?>">

        </td>
    <?php endforeach ?>

    <?php $salaries = getSalaries('faculty', $contract, $observation); ?>
    <td class="benefitsAsPercent" id="val1:<?= $benefitShort ?>:<?= $contract ?>:<?= $salaries ?>"></td>


    <?php // Now the benefits average table ?>
    <td class="no-border"></td>
    <td class="grid-category"><?= $benefitLabel ?></td>
    <?php foreach (getRanks() as $rank => $rankLabel): ?>
        <?php
        $rankShort = shortenRank($rank);
        ?>

        <td class="benefitsAverage" id="val2:<?= $rankShort ?>:<?= $benefitShort ?>:<?= $contract ?>">

        </td>
    <?php endforeach ?>

    <td class="benefitsAverage" id="val2:<?= $benefitShort ?>:<?= $contract ?>">

    <?php
}

function showValidationColumnsTotal($monthNumber, $observation)
{
    $contract = "$monthNumber-month";
    // First the benefits as percent
    ?>

        <td class="no-border"></td>
        <td class="grid-category">TOTAL</td>

        <?php foreach (getRanks() as $rank => $rankLabel): ?>
            <?php
            $salaries = getSalaries($rank, $contract, $observation);
            $rankShort = shortenRank($rank);
            ?>

            <td class="benefitsAsPercent" id="val1:<?= $rankShort ?>:<?= $contract ?>:<?= $salaries ?>">

            </td>
        <?php endforeach ?>

        <?php $salaries = getSalaries('faculty', $contract, $observation); ?>
        <td class="benefitsA" id="val:<?= $contract ?>:<?= $salaries ?>"></td>

        <?php // Now benefits average ?>
        <td class="no-border"></td>
        <td class="grid-category">TOTAL</td>

        <?php foreach (getRanks() as $rank => $rankLabel): ?>
            <?php
            $rankShort = shortenRank($rank);
            ?>

            <td class="benefitsAverage <?= $contract ?>" id="val2:<?= $rankShort ?>:<?= $contract ?>">

            </td>
        <?php endforeach ?>

        <td class="benefitsAverageAllRanks" id="val3:<?= $contract ?>"></td>

    <?php
}

function displayValidationTotals($benefit, $label, $observation)
{
    //return false;

    $totalSalaries = 0;

    $benefitShort = shortenBenefit($benefit);

    ?>

    <td class="no-border"></td>
    <td class="grid-category"><?= $label ?></td>

    <?php foreach (getRanks() as $rank => $rankLabel): ?>
        <?php
            $salaries = getSalariesCombined($rank, $observation);
            $totalSalaries += $salaries;
            $rankShort = shortenRank($rank);
            $id = "val3:$rankShort:$benefit:$salaries";
        ?>

        <td class="benefitsAsPercent percentConversion" id="<?= $id ?>"></td>

    <?php endforeach ?>

    <td class="benefitsAsPercent percentConversion" id="val3:<?= $benefit ?>:<?= $totalSalaries ?>"></td>

    <?php // Now the benefits average table ?>
    <td class="no-border"></td>
    <td class="grid-category"><?= $label ?></td>
    <?php foreach (getRanks() as $rank => $rankLabel): ?>
        <?php
            $rankShort = shortenRank($rank);
        ?>

        <td class="benefitsAverage" id="val2:<?= $rankShort ?>:<?= $benefitShort ?>">

        </td>
    <?php endforeach ?>

<td class="benefitsAverage" id="val2:<?= $benefitShort ?>">



    <?php
}

function shortenBenefit($benefit)
{
    $search = array(
        'combined_medical_dental',
        'group_life',
        'worker_comp'
    );

    $replace = array(
        'combined',
        'group-life',
        'workers-comp'
    );

    $shortened = str_replace($search, $replace, $benefit);

    return $shortened;
}

function shortenRank($rank)
{
    $search = array(
        'associate_professor',
        'assistant_professor',
        'no_rank'
    );

    $replace = array(
        'associate',
        'assistant',
        'no-rank'
    );

    $shortened = str_replace($search, $replace, $rank);

    return $shortened;
}

function getRanks() {
    return array(
        'professor' => 'Professor',
        'associate_professor' => 'Associate',
        'assistant_professor' => 'Assistant',
        'instructor' => 'Instructor',
        'lecturer' => 'Lecturer',
        'no_rank' => 'No Rank'
    );
}

function getBenefits()
{
    return array(
        'retirement' => 'Retirement',
        'medical' => 'Medical',
        'dental' => 'Dental',
        'combined_medical_dental' => 'Combined Medical/Dental',
        'disability' => 'Disability',
        'tuition' => 'Tuition',
        'fica' => 'FICA',
        'unemployment' => 'Unemployment',
        'group_life' => 'Group Life',
        'worker_comp' => 'Worker\'s Comp',
        'other' => 'Other'
    );
}

function getSalaries($rank, $contract, $observation)
{
    $contract = str_replace('-', '_', $contract);

    $maleKey = "ft_male_{$rank}_salaries_$contract";
    $femaleKey = "ft_female_{$rank}_salaries_$contract";

    $total = floatval($observation->get($maleKey)) + floatval($observation->get($femaleKey));

    /*if ($rank == 'faculty') {
        pr($rank); pr($contract); pr($maleKey); pr($total); echo '<hr>';
    }*/
    return $total;
}

// Do both contracts added together and converted.
function getSalariesCombined($rank, $observation)
{
    $nineMonth = getSalaries($rank, '9_month', $observation);
    $twelveMonth = getSalaries($rank, '12_month', $observation);
    $conversionFactor = getConversionFactor($observation);

    $total = $nineMonth + ($twelveMonth * $conversionFactor);

    return $total;
}

/*function getClassesToConvert()
{
    return array(
        // Form 2
        'salaries month-12',
        // Form 3
        'exp 12-month retirement',
        'exp 12-month fica',
        'exp 12-month group-life',
        'exp 12-month workers-comp'
    );
}*/


function getConversionFactor($observation)
{
    $cf = $observation->get('institution_conversion_factor');
    if (empty($cf)) {
        $cf = 1;
    }

    return $cf;
}

function getBenefit($rowNumber)
{
    $i = 0;
    foreach (getBenefits() as $key => $label) {
        if ($i == $rowNumber) {
            return array($key, $label);
        }
        $i++;
    }
}

