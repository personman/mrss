<project name="DfSkeleton" default="test">
    <target name="codesniffer" description="Run PHP_Codesniffer">
        <!-- PHP CodeSniffer -->
        <exec command="export PATH=./bin:$PATH" />
        <echo message="Starting PHP_Codesniffer..." />

        <!--<exec command="echo $SHELL" passthru="true" /-->

        <exec
              command="phpcs --standard=PSR2 --ignore=*Bootstrap* module"
              outputProperty="codesniffer.output" passthru="false" />

        <if>
            <equals arg1="" arg2="${codesniffer.output}" />
            <then>
                <echo message="Code conforms to PSR2 coding standard." />
            </then>
            <else>
                <fail message="${codesniffer.output}" />
            </else>
        </if>

        <!--
        <phpcodesniffer
                standard="zend"
                ignorePatterns="*/bin/*,*/vendor/*,*.min.css,*.min.js"
                skipversioncheck="true"
                format="summary"
                allowedFileExtensions="php html js css"
                verbosity="0"
                showWarnings="true"

                showSources="true"
                file="module">
            <formatter type="default"/>
        </phpcodesniffer>
        -->


    </target>


    <target name="phpunit">
        <echo message="Starting PHPUnit..." />
        <exec command="phpunit" passthru="false" outputProperty="phpunit.results"
            />


        <echo message="PHPunit result: ${phpunit.results}" />
        <if>
            <contains string="${phpunit.results}" substring="failure" />
            <then>
                <fail message="PHPUnit failure." />
            </then>
            <else>
                <echo message="PHPUnit OK." />
            </else>
        </if>

        <!-- The Phing PHPUnit task doesn't fail the build when tests fail -->
        <!--<phpunit printsummary="true"
                 haltonfailure="true"
                 haltonerror="true"
                 configuration="phpunit.xml.dist">
            <batchtest>
                <fileset dir="MrssTest/Model">
                    <include name="*Test.php"/>
                </fileset>
            </batchtest>
        </phpunit>-->
        <echo message="Finished PHPUnit." />
    </target>

    <!-- Note: On the Jenkins build server, behat fails for no reason once in a while -->
    <target name="behat">
        <echo message="Starting PHP's built-in web server..." />
        <exec command="php -S localhost:8182 -t public/" spawn="true" />
        <echo message="Server running on localhost:8182." />

        <echo msg="Running Behat scenarios in ${project.basedir}" />
        <exec command="./bin/behat --format failed"  description="Behat"
              outputProperty="behat.output" />
        <if>
            <equals arg1="" arg2="${behat.output}" />
            <then>
                <echo message="Behat tests passed." />
            </then>
            <else>
                <fail message="The following Behat scenarios failed: \n${behat.output}" />

            </else>

        </if>

        <echo message="Stopping PHP's built-in web server." />
        <exec command="kill %%" />

    </target>

    <target name="clean">
        <delete dir="vendor" />
        <delete dir="bin" />
        <delete dir="report" />
    </target>

    <target name="composer">
        <exec command="php composer.phar update" passthru="true" />
    </target>


    <target name="phinx" description="DB migrations with Phinx">
        <echo message="Running DB migrations with Phinx" />
        <exec command="php ./public/index.php phinx sync" passthru="true" />

        <!-- Doing this in two steps works better than just calling index.php phinx migrate. not sure why -->
        <exec command="phinx migrate -c config/phinx.yml" description="Try running phinx directly" passthru="true" />


    </target>

    <target name="migrate">
        <echo message="Running database migration." />
        <exec command="./bin/doctrine-module migrations:migrate -q -n"
              passthru="true" />
    </target>

    <target name="test-db" description="Create the test db and write the credentials to a config file.">
        <!-- These is the credentials for the db we're about to create -->
        <property name="db.name" value="mrss_test" />
        <property name="db.username" value="mrss_tester" />
        <property name="db.password" value="testdbpass" />

        <!-- And here are the credentials needed to actually create the db. This mysql user has to be set up ahead of time -->
        <property name="db-admin.username" value="root" />
        <property name="db-admin.password" value="root" />

        <property name="db.configFile" value="config/autoload/db.php" />

        <!-- Create the db -->
        <property name="db.create_command" value="mysql -u ${db-admin.username} -p${db-admin.password} -e &quot;DROP DATABASE IF EXISTS ${db.name}; CREATE database ${db.name}; GRANT ALL ON ${db.name}.* TO '${db.username}'@'localhost' IDENTIFIED BY '${db.password}';&quot;" />

        <echo message="Creating test database for acceptance testing." />
        <exec command="${db.create_command}" passthru="true" />

        <!-- Back up the existing db config -->
        <echo message="Backing up db config file." />
        <exec command="mv ${db.configFile} config/autoload/db.php.bak" />

        <!-- Now write the credentials out to a config file -->
        <echo message="Writing config file." />
        <exec command="touch ${db.configFile}" passthru="true" />
        <echo message="&lt;?php $dbParams = array('database' => '${db.name}', 'username'  => '${db.username}', 'password'  => '${db.password}',   'hostname'  => 'localhost');" file="${db.configFile}" />

        <!-- Make sure the db.php file is there -->
        <exec command="ls ${db.configFile}" outputProperty="db.configFileExists" />
        <if>
            <equals arg1="${db.configFile}" arg2="${db.configFileExists}" />
            <then>
            </then>
            <else>
                <echo message="db.php is not there." />
                <fail message="test db config (db.php) was not written." />
            </else>
        </if>

    </target>



    <target name="test-db-teardown" description="Undo the changes made in the test-db task">
        <exec command="mv config/autoload/db.php.bak config/autoload/db.php" />

    </target>

    <target name="test" depends="codesniffer,behat-with-test-db,phpunit"/>

    <target name="behat-with-test-db"
            depends="test-db,migrate,behat,test-db-teardown" />
</project>
